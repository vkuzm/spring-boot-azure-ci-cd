
trigger:
  batch: false
  branches:
    include:
      - main
      - master

variables:
  mavenPomFile: 'pom.xml'
  jdkVersion: '1.11'
  applicationName: 'azure-spring-boot-ci-cd'
  azureSubscriptionName: 'azure-springboot-subscribtion'
  dockerRegistry: 'azurespringbootcontainertest'
  dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile'
  imageRepository: 'springbootapp'
  dockerRegistryUrl: '${dockerRegistry}.azurecr.io'
  tag: '$(Build.BuildId)'

pool:
  vmImage: 'ubuntu-latest'

stages:
- stage: Test
  jobs:
  - job: test_job
    steps:

      #1 Run tests
      - task: Maven@3
        displayName: Run tests
        inputs:
          mavenPomFile: $(mavenPomFile)
          jdkVersionOption: $(jdkVersion)
          goals: 'test'

      #2 Run analyze code by SonarCloud
      - task: Maven@3
        displayName: Run sonar
        env:
         GITHUB_TOKEN: ${GITHUB_TOKEN}  # Needed to get PR information, if any
         SONAR_TOKEN: ${SONAR_TOKEN}
        inputs:
          mavenPomFile: $(mavenPomFile)
          jdkVersionOption: $(jdkVersion)
          goals: 'org.sonarsource.scanner.maven:sonar-maven-plugin:sonar'


- stage: Build
  dependsOn: test
  # Run this stage if previous stage(s) succeeded and build reason is not a pull request
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
  jobs:
  - job: build_job
    continueOnError: 'false'
    steps:

      #1 Build the app
      - task: Maven@3
        displayName: Build project
        inputs:
          mavenPomFile: $(mavenPomFile)
          jdkVersionOption: $(jdkVersion)
          goals: 'package -Dmaven.test.skip=true'
  
      #2 Build the container and push to the registry
      - task: Docker@2
        displayName: Build and push an image to container registry
        inputs:
          command: buildAndPush
          repository: $(imageRepository)
          dockerfile: $(dockerfilePath)
          containerRegistry: $(dockerRegistry)
          buildContext: '.'
          tags: |
            $(tag)

- stage: Deploy
  jobs:
  - job: deploy_job
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: AzureWebAppContainer@1
      inputs:    
        azureSubscription: '$(azureSubscriptionName)'
        appName: '$(applicationName)'
        containers: '$(dockerRegistryUrl)/$(imageRepository):$(tag)'